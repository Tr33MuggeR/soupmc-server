services:
  mc:
    image: itzg/minecraft-server:latest
    tty: true
    stdin_open: true
    network_mode: service:mc-lazytainer
    stop_grace_period: 30s
    environment:
      EULA: "TRUE"
      TYPE: MODRINTH
      VERSION: 1.21.8
      MEMORY: 6144M
      MOTD: Why are you buying clothes at the soup store?
      ICON: https://cdn.imgbin.com/1/6/6/imgbin-graphics-bowl-food-soup-soup-UYDj21fMLeMwHMzS942ATLfKs.jpg
      OVERRIDE_ICON: "true"
      USE_AIKAR_FLAGS: "true"
      USE_MEOWICE_FLAGS: "true"
      TZ: America/New_York
      DIFFICULTY: "2"
      LEVEL: world-survival
      SPAWN_PROTECTION: "0"
      MAX_WORLD_SIZE: "15000"
      SIMULATION_DISTANCE: "24"
      VIEW_DISTANCE: "12"
      ENABLE_WHITELIST: "true"
      HIDE_ONLINE_PLAYERS: "true"
      PLAYER_IDLE_TIMEOUT: "300"
      UID: ${MC_UID}
      GID: ${MC_GID}
      ENABLE_ROLLING_LOGS: "true"
      LOG_TIMESTAMP: "true"
      RESOURCE_PACK: ${MC_RESOURCEPACK}
      RESOURCE_PACK_SHA1: ${MC_RESOURCEPACK_SHA1}
      RESOURCE_PACK_REQUIRED: "false"
      SEED: ${MC_SEED}
      MODRINTH_MODPACK: /data/SoupMC Server Pack 1.1.7.mrpack
      STOP_SERVER_ANNOUNCE_DELAY: "30"
    volumes:
      - ./data:/data
    labels:
      - lazytainer.group=minecraft
    depends_on:
      - mc-lazytainer
    healthcheck:
      test: mc-health
      start_period: 2m # Give it a couple of minutes to start
      interval: 30s
      timeout: 10s
      retries: 3
  mc-lazytainer:
    image: ghcr.io/vmorganp/lazytainer:master
    container_name: mc-lazytainer
    environment:
      VERBOSE: false
    network_mode: service:mc-protonvpn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - lazytainer.group.minecraft.sleepMethod=stop
      - lazytainer.group.minecraft.ports=${LZ_START_PORT}
      - lazytainer.group.minecraft.minPacketThreshold=13 # Start after fifteen incomming packets
      - lazytainer.group.minecraft.inactiveTimeout=420 # 600 = 10 minutes, to allow the server to bootstrap. You can probably make this lower later if you want.
    depends_on:
      mc-protonvpn:
        condition: service_healthy
    restart: unless-stopped
  mc-protonvpn:
    image: qmcgaw/gluetun:latest
    container_name: mc-protonvpn
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
    ports:
      - ${VPN_PORT_PUBLIC}
      - ${DYNMAP_PORT}
    volumes:
      - ./gluetun:/gluetun
      - ./gluetun/info:/tmp/gluetun
    devices:
      - /dev/net/tun:/dev/net/tun
    environment:
      - TZ=America/New_York
      - VPN_SERVICE_PROVIDER=protonvpn
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY=${VPN_PRIVATE_KEY}
      - VPN_PORT_FORWARDING=on
      - VPN_PORT_FORWARDING_PROVIDER=protonvpn
      - SERVER_COUNTRIES="United States"
      - FIREWALL_OUTBOUND_SUBNETS=${VPN_SUBNETS}
    healthcheck:
      start_period: 15s
  mc-backup:
    image: itzg/mc-backup
    depends_on:
      mc:
        condition: service_healthy
    network_mode: service:mc-protonvpn
    env_file: .env
    environment:
      RCON_HOST: localhost
      BACKUP_NAME: mc-server
      BACKUP_INTERVAL: 12h
      POST_BACKUP_SCRIPT_FILE: /discord-backup-notify.sh
      PRUNE_RESTIC_RETENTION: --keep-within 7d
      BACKUP_METHOD: restic
      RESTIC_REPOSITORY: rclone:gdrive:mc-backup
      RESTIC_HOSTNAME: mc-server
      RCLONE_CONFIG: /config/rclone/rclone.conf
      EXCLUDES: "*.jar,cache,logs,*.tmp,**/rclone.conf"
      BACKUP_ON_STARTUP: "true"
      # restart: "no"
      # entrypoint: /restic-restore.sh

    volumes:
      - ./data:/data:ro
      - ./rclone:/config/rclone
      - ./discord-backup-notify.sh:/discord-backup-notify.sh:ro
      # - ./restic-restore.sh:/restic-restore.sh:ro
networks:
  mc_network:
    external: true
